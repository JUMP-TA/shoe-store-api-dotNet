name: Deploy DotNet project to AWS EC2

on:
  push:
    branches: ["main"]

env:
  DOTNET_VERSION: 9.0.x  # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Publish Project Using Dotnet'
      run: |
        pushd './OnlineShoeStoreAPI'
        dotnet publish --configuration Release --output ./output --self-contained --runtime linux-x64
        popd

    - name: Verify output directory
      run: |
        if [ ! -d "./OnlineShoeStoreAPI/output" ]; then
          echo "Output directory does not exist"
          exit 1
        fi

    - name: List output directory contents
      run: |
        echo "Listing contents of ./OnlineShoeStoreAPI/output directory:"
        ls -la ./OnlineShoeStoreAPI/output

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: output-files
        path: ./OnlineShoeStoreAPI/output

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: output-files
        path: ./OnlineShoeStoreAPI/output

    - name: Print working directory
      run: |
        echo "Current working directory:"
        pwd

    - name: List files in working directory
      run: |
        echo "Listing files in working directory:"
        ls -la

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Prepare SSH key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key
        chmod 600 private_key

    - name: Debug SSH connection
      run: |
        echo "Testing SSH connection..."
        ssh -i private_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

    - name: Copy files to EC2
      run: |
        echo "Copying files to EC2..."
        scp -i private_key -o StrictHostKeyChecking=no -r ./OnlineShoeStoreAPI/output ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/myapp

    - name: Run commands on EC2
      run: |
        echo "Running commands on EC2..."
        ssh -i private_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          sudo systemctl restart myapp.service
        EOF